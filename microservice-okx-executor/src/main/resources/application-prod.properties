spring.application.name=microservice-okx-executor
server.port=8082

# ==== App ====
app.signals-topic=prod.signals.v1
app.consumer-group=executor-bot

# Kafka из окружения
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:redpanda:9092}
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP:executor-bot}

# Протобаф
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer

# Schema Registry
spring.kafka.properties.schema.registry.url=${SCHEMA_REGISTRY_URL:http://redpanda:8081}

# Specific Protobuf message (value)
spring.kafka.properties.specific.protobuf.value.type=my.signals.v1.Signal

# Поведение консьюмера (в проде чаще всё же latest)
spring.kafka.consumer.auto-offset-reset=latest

# В проде тоже не хотим падать из-за отложенного деплоя топика
spring.kafka.listener.missing-topics-fatal=false

# (опционально) таймауты/надёжность
spring.kafka.properties.max.in.flight.requests.per.connection=1
spring.kafka.properties.enable.idempotence=true