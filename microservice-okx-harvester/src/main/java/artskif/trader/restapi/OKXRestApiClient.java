package artskif.trader.restapi;


import artskif.trader.kafka.KafkaProducer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.quarkus.runtime.Startup;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.jboss.logging.Logger;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeUnit;

@Startup
@ApplicationScoped
public class OKXRestApiClient {

    private static final Logger LOG = Logger.getLogger(OKXRestApiClient.class);

    @Inject KafkaProducer producer;

    // === Config ===
    @ConfigProperty(name = "okx.history.enabled", defaultValue = "true")
    boolean historyEnabled;

    @ConfigProperty(name = "okx.history.base-url", defaultValue = "https://www.okx.com")
    String baseUrl;

    @ConfigProperty(name = "okx.history.inst-id", defaultValue = "BTC-USDT")
    String instId;

    @ConfigProperty(name = "okx.history.limit", defaultValue = "100")
    int limit;

    @ConfigProperty(name = "okx.history.start-epoch-ms", defaultValue = "1609459200000")
    long startEpochMs;

    @ConfigProperty(name = "okx.history.request-pause-ms", defaultValue = "250")
    long requestPauseMs;

    @ConfigProperty(name = "okx.history.max-retries", defaultValue = "5")
    int maxRetries;

    @ConfigProperty(name = "okx.history.retry-backoff-ms", defaultValue = "1000")
    long retryBackoffMs;

    @ConfigProperty(name = "okx.history.bars", defaultValue = "1m,1H,4H,1D")
    List<String> bars;

    @ConfigProperty(name = "okx.history.pages-limit", defaultValue = "50")
    int pagesLimit;

    private final HttpClient http = HttpClient.newHttpClient();
    private final ObjectMapper om = new ObjectMapper();

    @PostConstruct
    void onStart() {
        if (!historyEnabled) {
            LOG.warn("‚öôÔ∏è OKX RestAPI –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω (okx.history.enabled=false)");
            return;
        }
        LOG.infof("üöÄ –°—Ç–∞—Ä—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ö–∞—Ä–≤–µ—Å—Ç–µ—Ä–∞ OKX: instId=%s bars=%s start=%s pagesLimit=%d limit=%d",
                instId, bars, Instant.ofEpochMilli(startEpochMs), pagesLimit, limit);

        for (String bar : bars) {
            try {
                harvestBar(bar);
            } catch (Throwable t) {
                // –ù–ï –≤–∞–ª–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ä—É
                LOG.errorf(t, "‚ùå –ù–µ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞—Ä–∞ %s, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏", bar);
            }
        }
        LOG.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–≤–µ—Å—Ç–µ—Ä OKX –∑–∞–≤–µ—Ä—à–∏–ª –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É");
    }

    private void harvestBar(String bar) {
        final String topic = "okx-candle-" + normalizeBarForTopic(bar) + "-history";
        LOG.infof("üì• –¢—è–Ω–µ–º –∏—Å—Ç–æ—Ä–∏—é: bar=%s -> topic=%s", bar, topic);

        Long before = null; // –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –±–µ–∑ before
        int pagesLoaded = 0;

        while (true) {
            if (pagesLoaded >= pagesLimit) {
                LOG.infof("‚õ≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç pagesLimit=%d –¥–ª—è bar=%s", pagesLimit, bar);
                break;
            }

            Optional<JsonNode> rootOpt = callHistoryIndexCandles(instId, bar, limit, null, before);
            if (rootOpt.isEmpty()) {
                LOG.warnf("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã) –¥–ª—è bar=%s before=%s", bar, String.valueOf(before));
                // –∏–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ä—É
                break;
            }

            JsonNode root = rootOpt.get();
            JsonNode data = root.path("data");
            if (!data.isArray() || data.isEmpty()) {
                LOG.infof("üèÅ –î–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç: bar=%s", bar);
                break;
            }

            // –í—ã—á–∏—Å–ª–∏–º minTs –¥–ª—è —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            long minTs = Long.MAX_VALUE;
            for (JsonNode arr : data) {
                // –º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∞ [ts, o, h, l, c, ...] ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ ts
                long ts = arr.get(0).asLong();
                if (ts < minTs) minTs = ts;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ê–ß–ö–£ —Ü–µ–ª–∏–∫–æ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª ‚Äî JSON –º–∞—Å—Å–∏–≤–∞ data
            String payload = data.toString(); // –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ = –≤—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            producer.sendMessage(topic, payload);

            pagesLoaded++;
            LOG.infof("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ #%d (%d –∑–∞–ø–∏—Å–µ–π) –¥–ª—è bar=%s; minTs=%d",
                    pagesLoaded, data.size(), bar, minTs);

            // –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–∑–∞–¥ –ø–æ before
            before = minTs - 1;

            // —É—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –ø–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
            if (before < startEpochMs) {
                LOG.infof("‚õ≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ startEpochMs=%d –¥–ª—è bar=%s", startEpochMs, bar);
                break;
            }

            sleep(requestPauseMs);
        }
    }

    /**
     * –î–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ OKX —Å —Ä–µ—Ç—Ä–∞—è–º–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Optional.empty(), –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.
     * –ù–ï –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ä—É–∂—É ‚Äî —á—Ç–æ–±—ã –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –±–∞—Ä–∞–º–∏.
     */
    private Optional<JsonNode> callHistoryIndexCandles(String instId, String bar, int limit, Long after, Long before) {
        StringBuilder uri = new StringBuilder(baseUrl)
                .append("/api/v5/market/history-index-candles")
                .append("?instId=").append(url(instId))
                .append("&bar=").append(url(bar))
                .append("&limit=").append(limit);
        if (after != null)  uri.append("&after=").append(after);
        if (before != null) uri.append("&before=").append(before);

        HttpRequest req = HttpRequest.newBuilder(URI.create(uri.toString()))
                .header("Accept", "application/json")
                .GET()
                .build();

        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                HttpResponse<String> resp = http.send(req, HttpResponse.BodyHandlers.ofString());
                int code = resp.statusCode();

                if (code == 200) {
                    JsonNode root = om.readTree(resp.body());
                    int s = root.path("code").asInt();
                    if (s == 0) return Optional.of(root);

                    String msg = root.path("msg").asText();
                    LOG.warnf("‚ö†Ô∏è OKX API error: code=%d msg=%s (attempt %d/%d)", s, msg, attempt, maxRetries);
                } else if (code == 429 || code == 418 || (code >= 500 && code < 600)) {
                    LOG.warnf("‚è≥ Rate/Server error HTTP %d (attempt %d/%d)", code, attempt, maxRetries);
                } else {
                    LOG.errorf("‚ùå HTTP %d, body=%s (attempt %d/%d)", code, resp.body(), attempt, maxRetries);
                }
            } catch (Exception e) {
                LOG.warnf("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ '%s' (attempt %d/%d)", e.getMessage(), attempt, maxRetries);
            }

            long backoff = retryBackoffMs * attempt;
            sleep(backoff);
        }

        LOG.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º empty()");
        return Optional.empty();
    }

    private static String normalizeBarForTopic(String bar) {
        switch (bar) {
            case "1m": return "1m";
            case "1H": return "1h";
            case "4H": return "4h";
            case "1D": return "1d";
            default:   return bar.toLowerCase(Locale.ROOT);
        }
    }

    private static String url(String s) {
        return s.replace(" ", "%20");
    }

    private static void sleep(long ms) {
        try { TimeUnit.MILLISECONDS.sleep(ms); } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
        }
    }
}
