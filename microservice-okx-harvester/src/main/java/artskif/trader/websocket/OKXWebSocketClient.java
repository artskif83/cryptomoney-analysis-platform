package artskif.trader.websocket;


import artskif.trader.kafka.KafkaProducer;
import io.quarkus.runtime.Startup;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.net.InetSocketAddress;
import java.net.Socket;
import java.time.Duration;
import jakarta.websocket.*;
import org.jboss.logging.Logger;

import javax.net.ssl.SSLSocketFactory;
import java.net.URI;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;

@ClientEndpoint
@Startup
@ApplicationScoped
public class OKXWebSocketClient {

    // === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
    private static final String WS_ENDPOINT = "wss://ws.okx.com:8443/ws/v5/business"; // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ /public
    private static final String WS_HOST = "ws.okx.com";
    private static final int WS_PORT = 8443;

    private static final long RECONNECT_DELAY_MS = 5_000L;       // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private static final long WATCHDOG_PERIOD_MS = 5_000L;       // –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private static final long INACTIVITY_RECONNECT_MS = 30_000L; // –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª—å—à–µ —ç—Ç–æ–≥–æ ‚Äî –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º

    private static final Logger LOG = Logger.getLogger(OKXWebSocketClient.class);

    @Inject
    KafkaProducer producer;

    private volatile Session session;
    private final Map<String, BlockingQueue<String>> queues = new ConcurrentHashMap<>();
    private ExecutorService kafkaExecutor;

    // –æ–¥–∏–Ω –æ–±—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Äî –∏ –¥–ª—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞, –∏ –¥–ª—è watchdog
    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
    private final AtomicBoolean reconnecting = new AtomicBoolean(false);
    private volatile long lastActivityNanos = System.nanoTime();

    @PostConstruct
    void init() {
        queues.put("okx-candle-1m", new LinkedBlockingQueue<>(10_000));
        queues.put("okx-candle-1h", new LinkedBlockingQueue<>(10_000));
        queues.put("okx-candle-4h", new LinkedBlockingQueue<>(10_000));
        queues.put("okx-candle-1d", new LinkedBlockingQueue<>(10_000));

        kafkaExecutor = Executors.newFixedThreadPool(queues.size());
        queues.forEach((topic, queue) ->
                kafkaExecutor.submit(() -> {
                    while (!Thread.currentThread().isInterrupted()) {
                        try {
                            String message = queue.take();
                            producer.sendMessage(topic, message);
                        } catch (InterruptedException ie) {
                            Thread.currentThread().interrupt();
                        } catch (Exception ex) {
                            LOG.error("‚ùå –û—à–∏–±–∫–∞ Kafka –æ—Ç–ø—Ä–∞–≤–∫–∏: " + ex.getMessage(), ex);
                        }
                    }
                })
        );

        // –∑–∞–ø—É—Å–∫–∞–µ–º watchdog
        scheduler.scheduleAtFixedRate(this::watchdog, WATCHDOG_PERIOD_MS, WATCHDOG_PERIOD_MS, TimeUnit.MILLISECONDS);

        connect();
    }

    /** –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∂–∏–≤–æ—Å—Ç–∏¬ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞—Ñ–∏–∫–∞. */
    private void watchdog() {
        try {
            final Session s = this.session;
            if (s == null || !s.isOpen()) {
                triggerReconnect("session is null/closed");
                return;
            }
            long silenceMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastActivityNanos);
            if (silenceMs >= INACTIVITY_RECONNECT_MS) {
                LOG.info("‚è≥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö " + silenceMs + " ms ‚Äî –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
                safeCloseAndReconnect();
            }
        } catch (Throwable t) {
            LOG.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ watchdog: " + t.getMessage(), t);
        }
    }

    /** –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. */
    private void safeCloseAndReconnect() {
        closeSessionQuietly();
        triggerReconnect("forced reopen");
    }

    /** –ö–æ–∞–ª–µ—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. */
    private void triggerReconnect(String reason) {
        if (reconnecting.compareAndSet(false, true)) {
            LOG.info("üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5s (" + reason + ")");
            scheduler.schedule(() -> {
                try {
                    connect();
                } finally {
                    reconnecting.set(false);
                }
            }, RECONNECT_DELAY_MS, TimeUnit.MILLISECONDS);
        }
    }

    public synchronized void connect() {
        closeSessionQuietly();

        // (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ —ç—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏) ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤—ã—Ö–æ–¥ –≤ —Å–µ—Ç—å
        if (!isEndpointReachable(WS_HOST, WS_PORT, 1500)) {
            LOG.info("üåê –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (TCP connect –Ω–µ —É–¥–∞–ª—Å—è) ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Å—ë —Ä–∞–≤–Ω–æ");
        }

        try {
            WebSocketContainer container = ContainerProvider.getWebSocketContainer();
            container.connectToServer(this, new URI(WS_ENDPOINT));
            LOG.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + WS_ENDPOINT);
            lastActivityNanos = System.nanoTime();
        } catch (Exception e) {
            LOG.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: " + e.getMessage(), e);
            triggerReconnect("connect() failed");
        }
    }

    @OnOpen
    public void onOpen(Session session) {
        this.session = session;
        lastActivityNanos = System.nanoTime();

        String subscribeMsg = """
        {
          "op": "subscribe",
          "args": [
            {"channel":"candle1m","instId":"BTC-USDT-SWAP"},
            {"channel":"candle1H","instId":"BTC-USDT-SWAP"},
            {"channel":"candle4H","instId":"BTC-USDT-SWAP"},
            {"channel":"candle1D","instId":"BTC-USDT-SWAP"}
          ]
        }""";
        session.getAsyncRemote().sendText(subscribeMsg);
        LOG.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏");
    }

    @OnMessage
    public void onMessage(String message) {
        lastActivityNanos = System.nanoTime(); // —Ñ–∏–∫—Å–∏—Ä—É–µ–º ¬´–∂–∏–≤–æ–π¬ª —Ç—Ä–∞—Ñ–∏–∫
        if (LOG.isDebugEnabled()) {
            LOG.debugf("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s%n", message);
        }

        String topic = determineTopic(message);
        if (topic != null) {
            BlockingQueue<String> q = queues.get(topic);
            if (q != null && !q.offer(message)) {
                LOG.warn("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–±—Ä–æ—à–µ–Ω–æ: " + topic);
            }
        }
    }

    // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä/–ø—Ä–æ–∫—Å–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç PONG ‚Äî —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    @OnMessage
    public void onPong(PongMessage pong) {
        ByteBuffer data = pong.getApplicationData();
        lastActivityNanos = System.nanoTime();
    }

    private String determineTopic(String message) {
        if (message.contains("\"channel\":\"candle1m\"")) return "okx-candle-1m";
        if (message.contains("\"channel\":\"candle1H\"")) return "okx-candle-1h";
        if (message.contains("\"channel\":\"candle4H\"")) return "okx-candle-4h";
        if (message.contains("\"channel\":\"candle1D\"")) return "okx-candle-1d";
        return null;
    }

    @OnClose
    public void onClose(Session session, CloseReason reason) {
        LOG.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: " + reason);
        LOG.infof("üîå –ö–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: %s, –ø—Ä–∏—á–∏–Ω–∞: %s%n", reason.getCloseCode(), reason.getReasonPhrase());
        triggerReconnect("onClose");
    }

    @OnError
    public void onError(Session session, Throwable t) {
        LOG.error("‚ùå –û—à–∏–±–∫–∞ WebSocket: " + t.getMessage());
        triggerReconnect("onError");
    }

    @PreDestroy
    public void cleanup() {
        LOG.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
        if (kafkaExecutor != null) {
            kafkaExecutor.shutdown();
            try {
                if (!kafkaExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                    LOG.info("‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è, —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...");
                    kafkaExecutor.shutdownNow();
                }
            } catch (InterruptedException e) {
                LOG.error("‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ");
                kafkaExecutor.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
        closeSessionQuietly();
        scheduler.shutdownNow();
    }

    private void closeSessionQuietly() {
        final Session s = this.session;
        if (s != null) {
            try {
                if (s.isOpen()) s.close();
            } catch (Exception ignore) {
            } finally {
                this.session = null;
            }
        }
    }

    /** –õ—ë–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TCP-–ø–æ—Ä—Ç–∞ (–¥–ª—è –ª–æ–≥–æ–≤/–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏). */
    private boolean isEndpointReachable(String host, int port, int timeoutMs) {
        try (Socket sock = SSLSocketFactory.getDefault().createSocket()) {
            sock.connect(new InetSocketAddress(host, port), timeoutMs);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
