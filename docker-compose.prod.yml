version: '3.8'

services:
  redpanda-prod:
    image: redpandadata/redpanda:latest
    container_name: redpanda-prod
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092
      - --advertise-kafka-addr=PLAINTEXT://redpanda-prod:9092,PLAINTEXT_HOST://localhost:19092
      - --schema-registry-addr=0.0.0.0:8081
    ports:
      - "9092:9092"
      - "9644:9644"
      - "19092:19092"
      - "8081:8081"
    networks:
      - net-prod

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    environment:
      KAFKA_BROKERS: redpanda:9092
      SCHEMAREGISTRY_ENABLED: "true"
      SCHEMAREGISTRY_URLS: "http://redpanda-prod:8081"
    ports:
      - "8080:8080"
    networks:
      - net-prod
    depends_on:
      - redpanda-prod

  timescaledb-prod:
    image: timescale/timescaledb-ha:pg17
    container_name: timescaledb-prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: market
    ports:
      - "54321:5432"
    volumes:
      - tsdb_prod:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d market"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - net-prod

  grafana-prod:
    image: grafana/grafana:latest
    container_name: grafana-prod
    depends_on:
      timescaledb-prod:
        condition: service_healthy
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      # (опционально) автоустановка плагинов, если хотим Plotly:
      # GF_INSTALL_PLUGINS: grafana-polystat-panel,marcusolsson-plotly-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_prod:/var/lib/grafana
    networks:
      - net-prod

  okx-harvester-prod:
    build:
      context: .                       # КОРЕНЬ репозитория!
      dockerfile: microservice-okx-harvester/Dockerfile
      args:
        MODULE: microservice-okx-harvester
    container_name: okx-harvester-prod
    depends_on:
      - redpanda-prod
    environment:
      QUARKUS_PROFILE: prod
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: redpanda:9092
      QUARKUS_KAFKA_SCHEMA_REGISTRY_URL: http://redpanda:8081
    networks:
      - net-prod
  okx-analyzer-prod:
    build:
      context: .                       # КОРЕНЬ репозитория!
      dockerfile: microservice-okx-analyzer/Dockerfile
      args:
        MODULE: microservice-okx-analyzer
    container_name: okx-analyzer-prod
    depends_on:
      - redpanda-prod
    environment:
      QUARKUS_PROFILE: prod
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: redpanda-prod:9092
      QUARKUS_KAFKA_SCHEMA_REGISTRY_URL: http://redpanda-prod:8081
    networks:
      - net-prod
  okx-executor-prod:
    build:
      context: .                       # КОРЕНЬ репозитория!
      dockerfile: microservice-okx-executor/Dockerfile
      args:
        MODULE: microservice-okx-executor
    container_name: okx-executor-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      KAFKA_BOOTSTRAP_SERVERS: redpanda-prod:9092
      SCHEMA_REGISTRY_URL: http://redpanda-prod:8081
      KAFKA_CONSUMER_GROUP: executor-bot
    depends_on:
      - redpanda-prod
    networks:
      - net-prod
volumes:
  tsdb_prod:
  grafana_prod:

networks:
  net-prod:
    driver: bridge