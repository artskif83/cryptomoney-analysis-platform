package artskif.trader.indicator.adx;


import artskif.trader.candle.Candle1m;
import artskif.trader.candle.CandleType;
import artskif.trader.dto.CandlestickDto;
import artskif.trader.events.CandleEvent;
import artskif.trader.events.CandleEventBus;
import artskif.trader.events.CandleEventListener;
import io.quarkus.runtime.Startup;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.Instant;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

@Startup
@ApplicationScoped
public class AdxIndicator1m extends AbstractAdxIndicator implements CandleEventListener, Runnable {

    @Inject
    AdxRepository adxBufferRepository;
    @Inject
    Candle1m candle1m;
    @Inject
    CandleEventBus bus;

    private final BlockingQueue<CandleEvent> queue = new ArrayBlockingQueue<>(4096, true);
    private final AdxBuffer buffer = new AdxBuffer(Duration.ofMinutes(1), 100);
    private final AdxCalculator calculator = new AdxCalculator();
    private final Path pathForSave = Paths.get("adxIndicator1m.json");

    private Thread worker;
    private volatile boolean running = false;

    @PostConstruct
    void init() {
        System.out.println("üîå [" + getName() + "] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥—Å—á–µ—Ç–∞ ADX –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞");

        restoreBuffer();
        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Å—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        bus.subscribe(this);
        running = true;
        worker = new Thread(this, getName() + "-worker");
        worker.start();
    }

    @PreDestroy
    void shutdown() {
        bus.unsubscribe(this);
        running = false;
        if (worker != null) worker.interrupt();
    }

    @Override
    public void onCandle(CandleEvent event) {
        if (event.type() != CandleType.CANDLE_1M) return;

        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞: –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –¥—Ä–æ–ø
        // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ offer(ev, timeout, unit) –∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É "drop oldest".
        boolean offered = queue.offer(event);
        if (!offered) {
            System.err.println("‚ùå [" + getName() + "] –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–±—ã—Ç–∏–µ –æ—Ç–±—Ä–æ—à–µ–Ω–æ: " + event);
        }
    }

    @Override
    public void run() {
        System.out.println("üîó [" + getName() + "] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ ADX –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: " + Thread.currentThread().getName());
        while (running) {
            try {
                process(queue.take());
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
            } catch (Exception ignored) {
                System.out.println("‚ùå [" + getName() + "] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–µ—á—É –≤ –ø–æ—Ç–æ–∫–µ: " + Thread.currentThread().getName() + " –æ—à–∏–±–∫–∞ - " + ignored);
            }
        }
    }

    private void process(CandleEvent ev) {
        CandlestickDto c = ev.candle();
        Instant bucket = ev.bucket();
        Map<Instant, CandlestickDto> history = candle1m.getBuffer().getSnapshot();
        Optional<AdxPoint> point = AdxCalculator.computeLastAdx(history, true);
        point.ifPresent(p -> buffer.putItem(bucket, p));

        System.out.println("üì• [" + getName() + "] –°–≤–µ—á–∞ - " + c);
        System.out.println("üì• [" + getName() + "] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  ADX - " + point.orElse(null));

        // –∫–æ–º–º–∏—Ç–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–≤–Ω—É—Ç—Ä–∏ calc —É–∂–µ —É—á—Ç–µ–Ω–æ)
        if (Boolean.TRUE.equals(c.getConfirmed())) {
            saveBuffer();
        }
    }

    @Override
    public AdxBuffer getBuffer() {
        return buffer;
    }

    @Override
    public String getName() {
        return "1m-ADX";
    }

    @Override
    public Path getPathForSave() {
        return pathForSave;
    }

    @Override
    public AdxRepository getBufferRepository() {
        return adxBufferRepository;
    }
}
