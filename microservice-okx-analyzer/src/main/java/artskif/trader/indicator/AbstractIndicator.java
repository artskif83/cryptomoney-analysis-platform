package artskif.trader.indicator;

import artskif.trader.candle.CandlePeriod;
import artskif.trader.common.AbstractTimeSeries;
import artskif.trader.common.StateRepository;
import artskif.trader.common.Stateable;
import artskif.trader.events.CandleEvent;
import artskif.trader.events.CandleEventBus;
import artskif.trader.events.CandleEventListener;

import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public abstract class AbstractIndicator<C> extends AbstractTimeSeries<C> implements CandleEventListener, Runnable, Stateable, IndicatorPoint {

    protected final CandleEventBus bus;

    public AbstractIndicator(CandleEventBus bus) {
        this.bus = bus;
    }

    private final BlockingQueue<CandleEvent> queue = new ArrayBlockingQueue<>(4096, true);

    private Thread worker;
    private volatile boolean running = false;

    protected abstract CandlePeriod getCandlePeriod();
    protected abstract void process(CandleEvent take);
    protected abstract StateRepository getStateRepository();
    protected abstract Path getPathForStateSave();

    public void init() {
        System.out.println("üîå [" + getName() + "] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞");

        restoreBuffer();
        if (isStateful()) restoreState();
        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Å—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        bus.subscribe(this);
        running = true;
        worker = new Thread(this, getName() + "-worker");
        worker.start();
    }

    public void shutdown() {
        bus.unsubscribe(this);
        running = false;
        if (worker != null) worker.interrupt();
    }

    @Override
    public void onCandle(CandleEvent event) {
        if (event.period() != getCandlePeriod()) return;

        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥—å—é—Å–µ—Ä–∞: –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –¥—Ä–æ–ø
        // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ offer(ev, timeout, unit) –∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫—É "drop oldest".
        boolean offered = queue.offer(event);
        if (!offered) {
            System.err.println("‚ùå [" + getName() + "] –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–±—ã—Ç–∏–µ –æ—Ç–±—Ä–æ—à–µ–Ω–æ: " + event);
        }
    }

    @Override
    public void run() {
        System.out.println("üîó [" + getName() + "] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: " + Thread.currentThread().getName());
        while (running) {
            try {
                process(queue.take());
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
            } catch (Exception ignored) {
                System.out.println("‚ùå [" + getName() + "] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ—á–∫—É –≤ –ø–æ—Ç–æ–∫–µ: " + Thread.currentThread().getName() + " –æ—à–∏–±–∫–∞ - " + ignored);
            }
        }
    }

    protected void restoreState() {
        try {
            System.out.println("üì• [" + getName() + "] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞");
            getState().restoreObject(getStateRepository().loadStateFromFile(getPathForStateSave()));
        } catch (IOException e) {
            System.out.println("‚ùå [" + getName() + "] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è : ");
        }
    }

    protected void saveState() {
        try {
            System.out.println("üì• [" + getName() + "] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ");
            getStateRepository().saveStateToFile(getState(), getPathForStateSave());
        } catch (IOException e) {
            System.out.println("‚ùå [" + getName() + "] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è : ");
        }
    }
}
