package artskif.trader.candle;

import artskif.trader.common.AbstractTimeSeries;
import artskif.trader.dto.CandlestickDto;
import artskif.trader.dto.CandlestickPayloadDto;
import artskif.trader.events.CandleEvent;
import artskif.trader.events.CandleEventBus;
import artskif.trader.mapper.CandlestickMapper;
import jakarta.annotation.PostConstruct;

import java.time.Instant;
import java.util.Map;
import java.util.Optional;


public abstract class AbstractCandle extends AbstractTimeSeries<CandlestickDto> implements CandleTicker {

    protected abstract CandleEventBus getEventBus();
    protected abstract CandleTimeframe getCandleTimeframe();

    @PostConstruct
    void init() {
        restoreBuffer();
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—É—Ñ–µ—Ä –∏–∑ –ø–∞—á–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (JSON-–º–∞—Å—Å–∏–≤ OKX /history-*-candles).
     * message: —Å—Ç—Ä–æ–∫–∞ –º–∞—Å—Å–∏–≤–∞ data, –Ω–∞–ø—Ä–∏–º–µ—Ä:
     * [[1698796800000,"34300","34500","34000","34210",...], [...], ...]
     */
    public synchronized void restoreFromHistory(String message) {
        try {
            Map<Instant, CandlestickDto> ordered = CandlestickMapper.mapJsonMessageToCandlestickMap(message, getCandleTimeframe());

            if (ordered.isEmpty()) {
                log().warnf("‚ö†Ô∏è [%s] –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", getName());
                return;
            }

            // –ï–¥–∏–Ω—ã–º —Å–Ω–∏–º–∫–æ–º, –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
            getBuffer().restoreItems(ordered); // Buffer.restoreItems(...) —É–∂–µ —Å–¥–µ–ª–∞–µ—Ç publishSnapshot()
            saveBuffer(); // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –ø–æ–¥ —Ñ–ª–∞–≥
            log().infof("‚úÖ [%s] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏", getName(), ordered.size());
        } catch (Exception e) {
            log().errorf(e, "‚ùå [%s] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: %s", getName(), e.getMessage());
        }
    }

    public synchronized void handleTick(String message) {
        try {
            //System.out.println("üì• [" + getName() + "] –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message);
            CandlestickPayloadDto candlestickPayloadDto;
            Optional<CandlestickPayloadDto> opt = CandlestickMapper.map(message, getCandleTimeframe());
            if (opt.isPresent()) {
                candlestickPayloadDto = opt.get();
            } else { return; }

            CandlestickDto candle = candlestickPayloadDto.getCandle();

            Instant bucket = candle.getTimestamp();
            getBuffer().putItem(bucket, candle);
            // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–æ–≤–æ–π —Å–≤–µ—á–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é
            getEventBus().publish(new CandleEvent(getCandleTimeframe(), candlestickPayloadDto.getInstrumentId(), bucket, candle));
            if (Boolean.TRUE.equals(candle.getConfirmed())) {
                saveBuffer();
            }
        } catch (Exception e) {
            log().errorf(e, "‚ùå [%s] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - %s. –û—à–∏–±–∫–∞ - %s", getName(), message, e.getMessage());
        }
    }

}
