package artskif.trader.strategy;

import artskif.trader.candle.CandleTimeframe;
import artskif.trader.events.CandleEvent;
import artskif.trader.events.CandleEventBus;
import artskif.trader.events.CandleEventListener;
import artskif.trader.indicator.AbstractIndicator;
import artskif.trader.indicator.IndicatorFrame;
import artskif.trader.indicator.IndicatorPoint;
import artskif.trader.indicator.IndicatorSnapshot;
import artskif.trader.signal.StrategyKind;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;


@NoArgsConstructor(force = true)
public abstract class AbstractStrategy implements CandleEventListener {

    protected final AtomicReference<IndicatorFrame> lastFrame = new AtomicReference<>();

    protected final CandleEventBus bus;
    protected final List<IndicatorPoint> indicators; // —Å–º. AllIndicatorsProducer

    protected AbstractStrategy(CandleEventBus bus, List<IndicatorPoint> indicators) {
        this.bus = bus;
        this.indicators = indicators;
    }

    protected abstract CandleTimeframe getCandleType();
    protected abstract StrategyKind getStrategyKind();

    @PostConstruct
    void start() {
        bus.subscribe(this); // —Å–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç —Ç—É –∂–µ —à–∏–Ω—É —Å–≤–µ—á–µ–π
    }

    @PreDestroy
    void stop() {
        bus.unsubscribe(this);
    }

    @Override
    public void onCandle(CandleEvent event) {
        if (event.period() != getCandleType()) return;

        // –ù–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫ —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ AbstractIndicator –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—é—Ç —Ç–∏–ø—ã —Å–≤–µ—á–µ–π –∏
        // –æ–±–Ω–æ–≤–ª—è—é—Ç —Å–≤–æ—ë value (–≤ —Å–≤–æ–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö). –ù–∞–º –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å value.
        IndicatorFrame frame = assembleFrame(event.bucket(), event.period());
        lastFrame.set(frame);
        //System.out.println("üîå –¢–µ–∫—É—â–∏–π —Ñ—Ä–µ–π–º - " + frame);

        // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–ª—å—à–µ, –∫–ª–∞—Å—Ç—å –≤ –±—É—Ñ–µ—Ä/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Ç.–ø.
        // System.out.println("üß© FRAME: " + frame);
    }

    public IndicatorFrame getLastFrame() {
        return lastFrame.get();
    }

    /** –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑ –ø–æ –≤—Å–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º */
    private IndicatorFrame assembleFrame(Instant bucket, CandleTimeframe period) {
        List<IndicatorSnapshot> snapshots = new ArrayList<>(indicators.size());

        for (IndicatorPoint ip : indicators) {
            BigDecimal value = ip.getValue();
            if (value == null) continue; // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –¥–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ

            // –ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç AbstractIndicator
            String name = (ip instanceof AbstractIndicator<?> ai)
                    ? ai.getName()
                    : (ip.getName() != null ? ip.getName() : ip.getClass().getSimpleName());

            IndicatorSnapshot snap = new IndicatorSnapshot(
                    name,
                    ip.getType(),
                    ip.getPeriod(),
                    ip.getCandleTimeframe(),
                    ip.getBucket(), // —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ bucket –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    value
            );
            snapshots.add(snap);
        }

        return new IndicatorFrame(bucket, period, snapshots);
    }
}
